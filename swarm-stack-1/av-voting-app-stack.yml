version: "3"
services: 
    redis:
        image: redis:alpine
        networks: 
            - frontend
        deploy:
            replicas: 1
            update_config:
                parallelism: 2
                delay: 10s
            restart_policy:
                condition: on-failure
    
    db:
        image: postgres:13-alpine
        volumes: 
            - db-data:/var/lib/postgresql/data
        networks: 
            - backend
        environment: 
            - POSTGRES_HOST_AUTH_METHOD=trust
        deploy:
            placement:
                constraints: [node.role == manager]

    vote:
        image: bretfisher/examplevotingapp_vote
        ports: 
            - 5000:80
        depends_on: 
            - redis
        deploy:
            replicas: 2
            update_config:
                parallelism: 2
            restart_policy:
                condition: on-failure

    result:
        image: bretfisher/examplevotingapp_result
        ports: 
            - 5004:80
        networks: 
            - backend
        depends_on: 
            - db
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
            restart_policy:
                condition: on-failure
        
    worker:
        image: bretfisher/examplevotingapp_worker
        networks: 
            - frontend
            - backend
        depends_on: 
            - redis
            - db
        deploy:
            replicas: 1
            mode: replicated
            labels: [APP=VOTING]
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints: [node.role == manager]
        
    visualizer:
        image: bretfisher/visualizer
        ports: 
            - 8080:8080
        networks: 
            - frontend
        volumes: 
            - /var/run/docker.sock:/var/run/docker.sock
        deploy:
            placement:
                constraints: [node.role == manager]
        

networks: 
    frontend:
    backend:

volumes: 
    db-data: